{"version":3,"sources":["data.js","components/Hamburger/Hamburger.js","components/Hamburger/index.js","components/ItemList/ItemList.js","components/ItemList/index.js","components/Item/Item.js","components/Item/index.js","components/TotalPrice/TotalPrice.js","components/TotalPrice/index.js","App.js","serviceWorker.js","index.js"],"names":["ingredients","id","name","color","price","Hamburger","props","className","style","height","selectedItem","textAlign","map","item","key","displayId","backgroundColor","width","margin","marginTop","ItemList","items","howMany","selectedItems","filter","isThere","find","removeAllItems","removeItem","addItem","length","Item","onClick","TotalPrice","total","forEach","App","state","bind","this","setState","concat","Math","random","ingredient","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.200d9d65.chunk.js","sourcesContent":["const ingredients = [\r\n    {\r\n        id: 1,\r\n        name: \"Lettuce\",\r\n        color: \"green\",\r\n        price: 1\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Cheese\",\r\n        color: \"#ffa600\",\r\n        price: 4\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Meat\",\r\n        color: \"black\",\r\n        price: 6\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Tomato\",\r\n        color: \"red\",\r\n        price: 2\r\n    }\r\n];\r\n\r\nexport default ingredients;","import React from 'react';\r\nimport ingredients from '../../data';\r\n\r\nfunction Hamburger(props) {\r\n    return (\r\n        <div>\r\n            <div className = \"BreadTop\" style={{height: \"150px\"}}>\r\n                \r\n            </div>\r\n            \r\n            {\r\n            props.selectedItem < 1 && <div style={{\r\n                textAlign: \"center\"\r\n                }}>\r\n                ADD SOME INGREDIENTS !\r\n                </div>\r\n            }\r\n            \r\n            \r\n            \r\n                {props.selectedItem.map(item => {\r\n                    return <div key = {item.displayId} style= {{\r\n                       height: \"20px\",\r\n                       backgroundColor: item.color,\r\n                       width: \"40%\",\r\n                       margin: \"0 auto\",\r\n                       marginTop: \"10px\"\r\n                    }}></div>\r\n                })}\r\n            \r\n\r\n        \r\n            <div className = \"BreadBottom\" style={{height: \"100px\"}}>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Hamburger;","import Hamburger from \"./Hamburger\"\r\n\r\n\r\nexport default Hamburger;","import React from 'react';\r\nimport {Item}  from \"../../components\";\r\n\r\nfunction ItemList(props) {\r\n\r\n    return (\r\n        <div>\r\n\r\n            {props.items.map(item => {\r\n                    const howMany = props.selectedItems.filter(selectedItem => {\r\n                    return item.name === selectedItem.name;\r\n                }) \r\n\r\n                const isThere = props.selectedItems.find(selectedItem => {\r\n                    return item.name === selectedItem.name;\r\n                \r\n                })\r\n                \r\n                \r\n                return <Item {...item} key = {item.id}\r\n                        removeAllItems = {props.removeAllItems}\r\n                        removeItem = {props.removeItem}\r\n                        addItem = {props.addItem}\r\n                        selectedItems = {props.selectedItems}\r\n                        howMany = {howMany.length}\r\n                        isThere = {isThere} />\r\n            })} \r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default ItemList;","import ItemList from \"./ItemList\"\r\n\r\n\r\nexport default ItemList;","import React from 'react';\r\n// onClick kısmında neden onClick={props.addItem(props)} yazmadık ? Todolistte farkı yoktu ama burda arrow kullanmayınca çalışmıyor\r\nfunction Item(props) {\r\n    \r\n    return (\r\n        <div className = \"BuildControl\">\r\n            <div className = \"Label\">\r\n                {props.name}\r\n                \r\n            </div>\r\n            <div>\r\n                {props.howMany * props.price } $\r\n            </div> \r\n            <div>\r\n                {props.howMany}\r\n            </div> \r\n            \r\n                <button onClick= {() => props.addItem(props)} >Add</button>\r\n\r\n    \r\n                {\r\n                    props.isThere \r\n                    ? <button className=\"Less\"  onClick= {() => props.removeItem(props)}>Remove</button>\r\n                    : <button className=\"Less disabled\" >Remove</button>\r\n                }\r\n\r\n{\r\n                    props.isThere \r\n                    ? <button className=\"Less\"  onClick= {() => props.removeAllItems(props)}>Reset</button>\r\n                    : <button className=\"Less disabled\" >Reset</button>\r\n                }\r\n                \r\n                \r\n                \r\n\r\n                \r\n                \r\n            \r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\n\r\nexport default Item;","import Item from \"./Item\"\r\n\r\n\r\nexport default Item;","import React from 'react';\r\n\r\nfunction TotalPrice(props) {\r\n    let total=0;\r\n    props.selectedItem.forEach(item => {\r\n        total += item.price;\r\n    })\r\n    \r\n    \r\n    \r\n    return (\r\n        <div className =\"Label\">\r\n            Total Price: {total} $\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default TotalPrice;","import TotalPrice from \"./TotalPrice\"\r\n\r\n\r\nexport default TotalPrice;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Hamburger, ItemList, Item, TotalPrice} from \"./components\";\r\nimport ingredients from \"./data\";\r\nimport { Z_ASCII } from 'zlib';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state =  {\r\n      ingredients: []\r\n    }\r\n    this.addItem = this.addItem.bind(this);\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.removeAllItems = this.removeAllItems.bind(this);\r\n  }\r\n  \r\n  \r\n  addItem(item){\r\n      this.setState({\r\n        ingredients: [...this.state.ingredients].concat([\r\n          {...item, displayId: Math.random()}\r\n        ])\r\n  })  \r\n  }\r\n  \r\n\r\n  removeItem(ingredient){\r\n      const selectedItem = this.state.ingredients.find(item => {\r\n       return item.name === ingredient.name\r\n      });\r\n      \r\n      \r\n     this.setState({\r\n        ingredients: this.state.ingredients.filter(item => {\r\n        return item.displayId !== selectedItem.displayId;\r\n        })\r\n     })\r\n   }\r\n\r\n\r\n  removeAllItems(ingredient){\r\n      const selectedItem = ingredients.find(item => {\r\n        return item.name === ingredient.name\r\n      })\r\n      this.setState({\r\n        ingredients: this.state.ingredients.filter(item => {\r\n          return item.name !== selectedItem.name\r\n        })\r\n      })\r\n      \r\n\r\n\r\n  }\r\n  \r\n  \r\n  render(){\r\n    \r\n    return (\r\n      \r\n       <div className=\"App\">\r\n         \r\n       <Hamburger selectedItem = {this.state.ingredients}/>\r\n       <ItemList items = {ingredients}\r\n                  addItem = {this.addItem}\r\n                  removeAllItems = {this.removeAllItems}\r\n                  removeItem = {this.removeItem}\r\n                  selectedItems = {this.state.ingredients}\r\n                   />\r\n       <TotalPrice selectedItem = {this.state.ingredients}\r\n       />\r\n\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}